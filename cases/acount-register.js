const fetch = require('node-fetch')
const {
    sendPasswordResetEmail,
    createUserWithEmailAndPassword
} = require('firebase/auth')

module.exports = async function(text, m, reply, nyanBot2, sender, command, sendReplyButton, sendCarousel, prefix, isGroup) {
    const comilla = '`'
    if (global.DATABASE.data.users[sender].register === true) return reply('*Ya tienes cuenta registrada y as iniciado sesi√≥n, no es necesario registrarte!*')
    if (isGroup) {
        const cards = [{
                header: {
                    imageMessage: './Media/theme/login.jpg',
                    hasMediaAttachment: true,
                },
                body: {
                    text: `‚ó¶  *El primer m√©todo seria acceder a la p√°gina oficial, En ella encontraras un formulario b√°sico de registro, el cual te pedir√° crear un usuario, solo necesitaras un correo vigente, crear una contrase√±a para la p√°gina, y un nombre de usuario.*\n
*¬°una vez creada tu cuenta puedes iniciar sesi√≥n en el bot utilizando el comando ${comilla}${prefix}login${comilla} y el correo vinculado a la cuenta que creaste! Mira la ilustraci√≥n de la imagen para basarte de ah√≠!*`,
                },
                nativeFlowMessage: {
                    buttons: [{
                        name: "cta_url",
                        buttonParamsJson: JSON.stringify({
                            display_text: `Acceder a la p√°gina oficial! üçü`,
                            url: `https://samu330.com/login`,
                            merchant_url: `https://samu330.com/login`
                        })
                    }]
                }
            },
            {
                header: {
                    imageMessage: './Media/theme/reg.jpg',
                    hasMediaAttachment: true,
                },
                body: {
                    text: `‚ó¶  *¬°la segunda manera de registrarte, es a trav√©s del chat privado del bot, sigue la ilustraci√≥n que se muestra en la imagen para tener un registro exitoso! Al completar tu registro en WhatsApp obtendr√°s 200 puntos de regalo!*\n
*¬°El correo que vayas a ingresar es necesario que est√© vigente, no se te pedir√° c√≥digo de verificaci√≥n, pero si requieres cambiar tu contrase√±a se te enviara un link de restablecimiento al correo vinculado a tu cuenta!*`,
                },
                nativeFlowMessage: {
                    buttons: [{
                        name: "cta_url",
                        buttonParamsJson: JSON.stringify({
                            display_text: `Registro en WhatsApp ü™Ä`,
                            url: `https://wa.me/samu330`,
                            merchant_url: `https://wa.me/samu330`
                        })
                    }]
                }
            }
        ];

        return await sendCarousel(m.chat, {}, {
            header: `*Puedes registrarte de 2 maneras! üìå*\n\n> _*üîµ Sigue las instrucciones detalladas en las im√°genes de abajo:*_\n
> _*¬°LA INFORMACI√ìN QUE PROPORCIONARAS SE ELIMINA AUTOM√ÅTICAMENTE CONCLUYENDO EL REGISTRO, Y SOLO SERA UTILIZADO PARA DARTE DE ALTA EN EL BOT, SOLO ASEGURATE DE CREAR UNA CONTRASE√ëA QUE NO UTILICES EN NING√öN OTRO SITIO!! üõë*_\n
> ¬°RECUERDA QUE SOLO PUEDES REGISTRARTE EN EL CHAT PRIVADO DEL BOT!! ‚ö†Ô∏è`,
            footer: `${global.botname}`,
            cards: cards
        });
    }
    const args = text.split(' ');
    const email = args[0];
    const password = args[1];
    const name = args[2];
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    function isValidPassword(password) {
        const minLength = 8;
        const hasLowerCase = /[a-z]/.test(password);
        const hasNumbers = /\d/.test(password);
        const hasSpecialChars = /[!@#$%^&*]/.test(password);

        return password.length >= minLength && hasLowerCase && hasNumbers && hasSpecialChars;
    }
    if (text.startsWith(`${prefix} `) || text.includes(` ${prefix}`)) {
        return reply(`*El comando debe estar en el formato correcto, sin espacios entre el prefijo y el comando. Ejemplo: ${prefix + command} correo@gmail.com contrase√±a nombreUsuario*`);
    }
    if (args.length > 3) {
        return reply(`*No se pueden ingresar m√°s de tres par√°metros. Ejemplo de uso:*\n${prefix + command} correo@gmail.com contrase√±a nombreUsuario`);
    }

    if (!text.trim()) {
        return reply(`*Por favor ingresa los datos correctamente para poder registrarte!*\n*Aseg√∫rate de incluir tanto como:*\n- correo\n- contrase√±a\n- nombre de usuario\n*Todo separado por espacios.*`);
    }
    if (!email || !password || !name) {
        return reply('*Aseg√∫rate de incluir tanto como el correo, contrase√±a y nombre de usuario, todo separado por espacios.*');
    }
    if (email.includes(' ') || password.includes(' ') || name.includes(' ')) {
        return reply('*Los datos (correo, contrase√±a y nombre de usuario) no deben contener espacios. Aseg√∫rate de que tus datos sean correctos.*');
    }
    if (!emailPattern.test(email)) {
        return reply('*El correo ingresado no es v√°lido. Por favor, introduce un correo electr√≥nico v√°lido.*');
    }
    if (!isValidPassword(password)) {
        return reply(`*La contrase√±a debe tener al menos 8 caracteres, incluir letras, un n√∫mero y un car√°cter especial.*\n*Ejemplo: Pass123!*`);
    }
    const verificationUrl = `https://us-central1-number-ac729.cloudfunctions.net/checkEmail?email=${encodeURIComponent(email)}`;

    fetch(verificationUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.IsEmailRegistered) {
                const buttons = [{
                    name: "quick_reply",
                    buttonParamsJson: JSON.stringify({
                        display_text: 'Iniciar sesi√≥n! üîê',
                        id: `${prefix}login ${data.Result}`
                    }),
                }];
                sendReplyButton(m.chat, buttons, m, {
                    content: `*El correo ingresado ya est√° registrado.*\n\n_Nombre de usuario:_ ${data.User}\n_UID:_ ${data.UID}
		    
*Si deseas puedes iniciar sesi√≥n con el correo que proporcionaste, solo toca el bot√≥n de abajo!*`
                });
                nyanBot2.sendMessage(m.chat, {
                    react: {
                        text: '‚ö†',
                        key: m.key
                    }
                })
            } else {
                return createUserWithEmailAndPassword(auth, email, password)
                    .then(userCredential => {
                        const user = userCredential.user;
                        const uid = user.uid;

                        const registrationUrl = `https://us-central1-number-ac729.cloudfunctions.net/createUser?email=${encodeURIComponent(email)}&user=${encodeURIComponent(name)}`;

                        return fetch(registrationUrl);
                    });
            }
        })
        .then(response => {
            if (response) {
                return response.json();
            }
        })
        .then(data => {
            if (data) {
                global.DATABASE.data.users[sender].register = true
                const buttons = [{
                    name: "cta_url",
                    buttonParamsJson: JSON.stringify({
                        display_text: 'Ya puedes iniciar sesi√≥n en la p√°gina! üè∑',
                        url: `https://samu330.com/login`,
                        merchant_url: `https://samu330.com/login`
                    }),
                }];
                sendReplyButton(m.chat, buttons, m, {
                    content: `Usuario registrado con √©xito!\n\n*Email: ${data.Result}*\n*UID: ${data.UID}*
		    
_*Felicidades, has ganado 200 puntos! üéÅ*_\n
_Tu sesi√≥n s√© ha guardado en la base de datos del bot! üò∏_`
                });
                nyanBot2.sendMessage(m.chat, {
                    react: {
                        text: 'üíö',
                        key: m.key
                    }
                })
                global.DATABASE.data.users[sender].limit += 200
            }
        })
        .catch(error => {
            console.error('Error:', error);
            reply(`Ocurri√≥ un error durante el proceso de registro.\n${error}`);
        });
};
